{"remainingRequest":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/howie/Documents/nlp_web/src/views/Layout/EntityIdentification.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/howie/Documents/nlp_web/src/views/Layout/EntityIdentification.vue","mtime":1585021550690},{"path":"/Users/howie/Documents/nlp_web/node_modules/css-loader/dist/cjs.js","mtime":1582429582288},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1582429582421},{"path":"/Users/howie/Documents/nlp_web/node_modules/postcss-loader/src/index.js","mtime":1564153364000},{"path":"/Users/howie/Documents/nlp_web/node_modules/sass-loader/dist/cjs.js","mtime":1571922493338},{"path":"/Users/howie/Documents/nlp_web/node_modules/cache-loader/dist/cjs.js","mtime":1571922489860},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js","mtime":1582429582421}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouRW50aXR5SWRlbnRpZmljYXRpb24gewogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjZmNjsKICAgIHBhZGRpbmc6IDIwcHg7CgogICAgLkNhcmQgewogICAgICAgIC5FbnRpdHlJZGVudGlmaWNhdGlvbkVjaGFydHMgewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgbWluLWhlaWdodDogNjAwcHg7CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["EntityIdentification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EntityIdentification.vue","sourceRoot":"src/views/LayoutTest","sourcesContent":["<template>\n    <div class=\"PartsAnalysis EntityIdentification\">\n        <Card dis-hover class=\"Card\">\n            <p slot=\"title\">实体识别</p>\n            <div ref=\"EntityIdentificationId\" class=\"EntityIdentificationEcharts\">\n\n            </div>\n            <Spin fix v-show=\"isList\">\n                <Icon type=\"ios-loading\" size=18 class=\"demo-spin-icon-load\"></Icon>\n                <div>载入中...</div>\n            </Spin>\n        </Card>\n    </div>\n</template>\n\n<script>\n  import api from '../../api/api'\n  import pinyin from \"pinyin\";\n\n  export default {\n    props: ['formData'],\n    name: \"EntityIdentification\",\n    data() {\n      return {\n        data: [],\n        links: [],\n        isList: true\n      };\n    },\n    computed: {},\n    methods: {\n      pinyin: pinyin,\n      initEchart() {\n        let EntityIdentificationId = this.$refs.EntityIdentificationId;\n        if (!EntityIdentificationId) {\n          return false\n        }\n        const myChart = this.$echarts.init(EntityIdentificationId);\n        let option = {\n          title: {\n            text: '',\n            subtext: '',\n            x: 'right',\n            y: 'bottom'\n          },\n          // tooltip : {\n          // },\n          toolbox: {\n            show: true,\n            feature: {\n              restore: {show: true},\n              magicType: {show: true,},\n              saveAsImage: {show: true}\n            }\n          },\n          legend: {\n            x: 'left',\n            data: ['实体', '实体词']\n          },\n          series: [{\n            type: 'graph',\n            layout: 'force',\n            legendHoverLink: true,\n            focusNodeAdjacency: true,\n            force: {\n              repulsion: 300\n            },\n            categories: [\n              {\n                name: '实体'\n              },\n              {\n                name: '实体词'\n              }\n            ],\n            itemStyle: {\n              normal: {\n                borderColor: '#fff',\n                borderWidth: 1,\n                shadowBlur: 10,\n                shadowColor: 'rgba(0, 0, 0, 0.3)'\n              }\n            },\n            label: {\n              show: true,\n              formatter: function (params) {\n                return params.data.showName //此处为label转换\n              }\n\n            },\n            lineStyle: {\n              color: 'source',\n              curveness: 0.3\n            },\n            emphasis: {\n              lineStyle: {\n                width: 5\n              }\n            },\n            roam: true,\n            data: this.data,\n            links: this.links,\n          }]\n        };\n        myChart.setOption(option, true);\n      },\n      async LoadData(record) {\n        try {\n          this.isList = true\n          const data = []\n          this.links = []\n          let formData = new FormData();\n          formData.append('title', record.title);\n          formData.append('content', record.content);\n          let id = 1\n          let result = await api.EntityIdentificationList(formData)\n          if (result.code === 200) {\n            let List = this.deteleObject(result.data)\n            if (List.length > 0) {\n              List = this.deteleObject(List)\n              List.map((v, i) => {\n                data.push({\n                  id: v.code,\n                  showName: v.name,\n                  category: 0,\n                })\n                if (v.words.length > 0) {\n                  v.words = this.deteleObject(v.words)\n                  v.words.map((item, j) => {\n                    data.push({\n                      id: i + item.id,\n                      value: item.score,\n                      showName: item.word,\n                      category: 1,\n                    })\n                  })\n                }\n              })\n              let item = [{name: '文本0', showName: '文本', category: 0}]\n              this.data = [...item, ...data]\n              this.data.forEach((node, i) => {\n                if (node.category === 0) {\n                  node.symbolSize = 50;\n                } else {\n                  node.symbolSize = 50 / 1.5 + node.value;\n                  node.category = node.category;\n                }\n              });\n              List.map((v, i) => {\n                this.links.push({\n                  source: v.code,\n                  target: '文本0'\n                })\n                if (v.words.length > 0) {\n                  v.words.map((items, k) => {\n                    this.links.push({\n                      source: i + items.id,\n                      target: v.code,\n                    })\n                  })\n                }\n              })\n            }\n            this.isList = false\n            this.$nextTick(() => {\n              this.initEchart()\n            })\n          }\n        } catch (e) {\n          console.log(e)\n        }\n      },\n      deteleObject(obj) {\n        var uniques = [];\n        var stringify = {};\n        for (var i = 0; i < obj.length; i++) {\n          var keys = Object.keys(obj[i]);\n          keys.sort(function (a, b) {\n            return (Number(a) - Number(b));\n          });\n          var str = '';\n          for (var j = 0; j < keys.length; j++) {\n            str += JSON.stringify(keys[j]);\n            str += JSON.stringify(obj[i][keys[j]]);\n          }\n          if (!stringify.hasOwnProperty(str)) {\n            uniques.push(obj[i]);\n            stringify[str] = true;\n          }\n        }\n        uniques = uniques;\n        return uniques;\n      },\n    },\n    created() {\n      if (this.formData.title || this.formData.content) {\n        this.LoadData(this.formData)\n      }\n    },\n\n    mounted() {\n      this.$nextTick(() => {\n        window.addEventListener('resize', () => {\n          if (this.$refs.EntityIdentificationId) {\n            this.$echarts.init(this.$refs.EntityIdentificationId).resize()\n          }\n        })\n      })\n    },\n    updated() {\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n    .EntityIdentification {\n        background-color: #f6f6f6;\n        padding: 20px;\n\n        .Card {\n            .EntityIdentificationEcharts {\n                width: 100%;\n                min-height: 600px;\n            }\n        }\n    }\n</style>\n\n"]}]}