{"remainingRequest":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/howie/Documents/nlp_web/src/views/Layout/Keyword.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/howie/Documents/nlp_web/src/views/Layout/Keyword.vue","mtime":1585021550673},{"path":"/Users/howie/Documents/nlp_web/node_modules/css-loader/dist/cjs.js","mtime":1582429582288},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1582429582421},{"path":"/Users/howie/Documents/nlp_web/node_modules/postcss-loader/src/index.js","mtime":1564153364000},{"path":"/Users/howie/Documents/nlp_web/node_modules/sass-loader/dist/cjs.js","mtime":1571922493338},{"path":"/Users/howie/Documents/nlp_web/node_modules/cache-loader/dist/cjs.js","mtime":1571922489860},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js","mtime":1582429582421}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouUGFydHNBbmFseXNpcyB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmNmY2OwogICAgbWluLWhlaWdodDogMzAwcHg7CiAgICBwYWRkaW5nOiAyMHB4OwogICAgLktleXdvcmRFbHNlewogICAgICAgIGhlaWdodDogMzAwcHg7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgfQogICAgLkNhcmQgewogICAgICAgIC5LZXl3b3JkRWNoYXJ0cyB7CiAgICAgICAgICAgIGhlaWdodDogMzAwcHg7CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["Keyword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Keyword.vue","sourceRoot":"src/views/LayoutTest","sourcesContent":["<template>\n    <div class=\"PartsAnalysis\">\n        <Card dis-hover class=\"Card\">\n\n            <p slot=\"title\">关键词</p>\n            <div ref=\"KeywordId\" class=\"KeywordEcharts\" v-if=\"word.length > 0\">\n\n            </div>\n            <div  class=\"KeywordElse\" v-else>\n                <div>没有关键词</div>\n            </div>\n            <Spin fix v-show=\"isList\">\n                <Icon type=\"ios-loading\" size=18 class=\"demo-spin-icon-load\"></Icon>\n                <div>载入中...</div>\n            </Spin>\n        </Card>\n    </div>\n</template>\n\n<script>\n  import api from \"../../api/api\";\n\n  export default {\n    name: \"Keyword\",\n    props: ['formData'],\n    data() {\n      return {\n        word: [],\n        isList: true\n      };\n    },\n    computed: {},\n    methods: {\n      initEchart() {\n        let KeywordId = this.$refs.KeywordId;\n        if (!KeywordId) {\n          return false\n        }\n        const myChart = this.$echarts.init(KeywordId);\n        var num = '';\n        for (var i = 0; i < 3; i++) {\n          num += Math.floor(Math.random() * 10);\n        }\n        const words = []\n        this.word.map((v, i) => {\n          words.push({\n            name: v.word,\n            value: v.score\n          })\n        })\n        myChart.setOption({\n          tooltip: {\n            show: true\n          },\n          toolbox : {\n            show : true,\n            feature : {\n              mark : { show : true },\n              restore : { show : true },\n              saveAsImage : { show : true }\n            }\n          },\n          series: [\n            {\n              name: \"\",\n              type: \"wordCloud\",\n              size: [\"100%\", \"100%\"],\n              textPadding: 0,\n              autoSize: {\n                enable: true,\n                minSize: 14\n              },\n              textStyle: {\n                normal: {\n                  color: function () {\n                    return (\n                      \"rgb(\" +\n                      Math.round(Math.random() * 255) +\n                      \", \" +\n                      Math.round(Math.random() * 255) +\n                      \", \" +\n                      Math.round(Math.random() * 255) +\n                      \")\"\n                    );\n                  }\n                }\n              },\n              data: words\n            }\n          ],\n          animationType: \"scale\",\n          animationEasing: \"elasticOut\",\n          animationDelay: function (idx) {\n            return Math.random() * 200;\n          }\n        }, true);\n      },\n      async LoadData(record) {\n        try {\n          this.isList = true\n          this.word = []\n          let formData = new FormData();\n          formData.append('title', record.title);\n          formData.append('content',record.content);\n          let result = await api.keywordList(formData)\n          if (result.code === 200) {\n            this.word = result.data\n          }\n          this.isList = false\n          this.$nextTick(() => {\n            this.initEchart()\n          })\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    },\n    created() {\n      if (this.formData.title && this.formData.content) {\n        this.LoadData(this.formData)\n      }\n    },\n\n    mounted() {\n    },\n    updated() {\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n    .PartsAnalysis {\n        background-color: #f6f6f6;\n        min-height: 300px;\n        padding: 20px;\n        .KeywordElse{\n            height: 300px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .Card {\n            .KeywordEcharts {\n                height: 300px;\n            }\n        }\n    }\n</style>\n\n"]}]}