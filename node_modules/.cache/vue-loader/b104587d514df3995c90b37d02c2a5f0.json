{"remainingRequest":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/howie/Documents/nlp_web/src/views/LayoutTest/EntityIdentification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/howie/Documents/nlp_web/src/views/LayoutTest/EntityIdentification.vue","mtime":1587550985781},{"path":"/Users/howie/Documents/nlp_web/node_modules/cache-loader/dist/cjs.js","mtime":1571922489860},{"path":"/Users/howie/Documents/nlp_web/node_modules/thread-loader/dist/cjs.js","mtime":1571922490305},{"path":"/Users/howie/Documents/nlp_web/node_modules/babel-loader/lib/index.js","mtime":1571922477277},{"path":"/Users/howie/Documents/nlp_web/node_modules/cache-loader/dist/cjs.js","mtime":1571922489860},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js","mtime":1582429582421}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhcGkgZnJvbSAnLi4vLi4vYXBpL2FwaScKaW1wb3J0IHBpbnlpbiBmcm9tICJwaW55aW4iOwoKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiBbJ2Zvcm1EYXRhJ10sCiAgbmFtZTogIkVudGl0eUlkZW50aWZpY2F0aW9uIiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZGF0YTogW10sCiAgICAgIGxpbmtzOiBbXSwKICAgICAgaXNMaXN0OiB0cnVlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHt9LAogIG1ldGhvZHM6IHsKICAgIHBpbnlpbjogcGlueWluLAogICAgaW5pdEVjaGFydCgpIHsKICAgICAgbGV0IEVudGl0eUlkZW50aWZpY2F0aW9uSWQgPSB0aGlzLiRyZWZzLkVudGl0eUlkZW50aWZpY2F0aW9uSWQ7CiAgICAgIGlmICghRW50aXR5SWRlbnRpZmljYXRpb25JZCkgewogICAgICAgIHJldHVybiBmYWxzZQogICAgICB9CiAgICAgIGNvbnN0IG15Q2hhcnQgPSB0aGlzLiRlY2hhcnRzLmluaXQoRW50aXR5SWRlbnRpZmljYXRpb25JZCk7CiAgICAgIGxldCBvcHRpb24gPSB7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHQ6ICcnLAogICAgICAgICAgc3VidGV4dDogJycsCiAgICAgICAgICB4OiAncmlnaHQnLAogICAgICAgICAgeTogJ2JvdHRvbScKICAgICAgICB9LAogICAgICAgIC8vIHRvb2x0aXAgOiB7CiAgICAgICAgLy8gfSwKICAgICAgICB0b29sYm94OiB7CiAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgZmVhdHVyZTogewogICAgICAgICAgICByZXN0b3JlOiB7c2hvdzogdHJ1ZX0sCiAgICAgICAgICAgIG1hZ2ljVHlwZToge3Nob3c6IHRydWUsfSwKICAgICAgICAgICAgc2F2ZUFzSW1hZ2U6IHtzaG93OiB0cnVlfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICB4OiAnbGVmdCcsCiAgICAgICAgICBkYXRhOiBbJ+WunuS9kycsICflrp7kvZPor40nXQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbewogICAgICAgICAgdHlwZTogJ2dyYXBoJywKICAgICAgICAgIGxheW91dDogJ2ZvcmNlJywKICAgICAgICAgIGxlZ2VuZEhvdmVyTGluazogdHJ1ZSwKICAgICAgICAgIGZvY3VzTm9kZUFkamFjZW5jeTogdHJ1ZSwKICAgICAgICAgIGZvcmNlOiB7CiAgICAgICAgICAgIHJlcHVsc2lvbjogMzAwCiAgICAgICAgICB9LAogICAgICAgICAgY2F0ZWdvcmllczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogJ+WunuS9kycKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICflrp7kvZPor40nCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgbm9ybWFsOiB7CiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJywKICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMSwKICAgICAgICAgICAgICBzaGFkb3dCbHVyOiAxMCwKICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4zKScKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHBhcmFtcykgewogICAgICAgICAgICAgIHJldHVybiBwYXJhbXMuZGF0YS5zaG93TmFtZSAvL+atpOWkhOS4umxhYmVs6L2s5o2iCiAgICAgICAgICAgIH0KCiAgICAgICAgICB9LAogICAgICAgICAgbGluZVN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiAnc291cmNlJywKICAgICAgICAgICAgY3VydmVuZXNzOiAwLjMKICAgICAgICAgIH0sCiAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICB3aWR0aDogNQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgcm9hbTogdHJ1ZSwKICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSwKICAgICAgICAgIGxpbmtzOiB0aGlzLmxpbmtzLAogICAgICAgIH1dCiAgICAgIH07CiAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKG9wdGlvbiwgdHJ1ZSk7CiAgICB9LAogICAgYXN5bmMgTG9hZERhdGEocmVjb3JkKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhpcy5pc0xpc3QgPSB0cnVlCiAgICAgICAgY29uc3QgZGF0YSA9IFtdCiAgICAgICAgdGhpcy5saW5rcyA9IFtdCiAgICAgICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0aXRsZScsIHJlY29yZC50aXRsZSk7CiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdjb250ZW50JywgcmVjb3JkLmNvbnRlbnQpOwogICAgICAgIGxldCBpZCA9IDEKICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgYXBpLkVudGl0eUlkZW50aWZpY2F0aW9uTGlzdFRlc3QoZm9ybURhdGEpCiAgICAgICAgaWYgKHJlc3VsdC5jb2RlID09PSAyMDApIHsKICAgICAgICAgIGxldCBMaXN0ID0gdGhpcy5kZXRlbGVPYmplY3QocmVzdWx0LmRhdGEpCiAgICAgICAgICBpZiAoTGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIExpc3QgPSB0aGlzLmRldGVsZU9iamVjdChMaXN0KQogICAgICAgICAgICBMaXN0Lm1hcCgodiwgaSkgPT4gewogICAgICAgICAgICAgIGRhdGEucHVzaCh7CiAgICAgICAgICAgICAgICBpZDogdi5jb2RlLAogICAgICAgICAgICAgICAgc2hvd05hbWU6IHYubmFtZSwKICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAwLAogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgaWYgKHYud29yZHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdi53b3JkcyA9IHRoaXMuZGV0ZWxlT2JqZWN0KHYud29yZHMpCiAgICAgICAgICAgICAgICB2LndvcmRzLm1hcCgoaXRlbSwgaikgPT4gewogICAgICAgICAgICAgICAgICBkYXRhLnB1c2goewogICAgICAgICAgICAgICAgICAgIGlkOiBpICsgaXRlbS5pZCwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5zY29yZSwKICAgICAgICAgICAgICAgICAgICBzaG93TmFtZTogaXRlbS53b3JkLAogICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAxLAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGxldCBpdGVtID0gW3tuYW1lOiAn5paH5pysMCcsIHNob3dOYW1lOiAn5paH5pysJywgY2F0ZWdvcnk6IDB9XQogICAgICAgICAgICB0aGlzLmRhdGEgPSBbLi4uaXRlbSwgLi4uZGF0YV0KICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKG5vZGUsIGkpID0+IHsKICAgICAgICAgICAgICBpZiAobm9kZS5jYXRlZ29yeSA9PT0gMCkgewogICAgICAgICAgICAgICAgbm9kZS5zeW1ib2xTaXplID0gNTA7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG5vZGUuc3ltYm9sU2l6ZSA9IDUwIC8gMS41ICsgbm9kZS52YWx1ZTsKICAgICAgICAgICAgICAgIG5vZGUuY2F0ZWdvcnkgPSBub2RlLmNhdGVnb3J5OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIExpc3QubWFwKCh2LCBpKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy5saW5rcy5wdXNoKHsKICAgICAgICAgICAgICAgIHNvdXJjZTogdi5jb2RlLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAn5paH5pysMCcKICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIGlmICh2LndvcmRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHYud29yZHMubWFwKChpdGVtcywgaykgPT4gewogICAgICAgICAgICAgICAgICB0aGlzLmxpbmtzLnB1c2goewogICAgICAgICAgICAgICAgICAgIHNvdXJjZTogaSArIGl0ZW1zLmlkLAogICAgICAgICAgICAgICAgICAgIHRhcmdldDogdi5jb2RlLAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmlzTGlzdCA9IGZhbHNlCiAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuaW5pdEVjaGFydCgpCiAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKGUpCiAgICAgIH0KICAgIH0sCiAgICBkZXRlbGVPYmplY3Qob2JqKSB7CiAgICAgIHZhciB1bmlxdWVzID0gW107CiAgICAgIHZhciBzdHJpbmdpZnkgPSB7fTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9ialtpXSk7CiAgICAgICAga2V5cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICByZXR1cm4gKE51bWJlcihhKSAtIE51bWJlcihiKSk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIHN0ciA9ICcnOwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykgewogICAgICAgICAgc3RyICs9IEpTT04uc3RyaW5naWZ5KGtleXNbal0pOwogICAgICAgICAgc3RyICs9IEpTT04uc3RyaW5naWZ5KG9ialtpXVtrZXlzW2pdXSk7CiAgICAgICAgfQogICAgICAgIGlmICghc3RyaW5naWZ5Lmhhc093blByb3BlcnR5KHN0cikpIHsKICAgICAgICAgIHVuaXF1ZXMucHVzaChvYmpbaV0pOwogICAgICAgICAgc3RyaW5naWZ5W3N0cl0gPSB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgICB1bmlxdWVzID0gdW5pcXVlczsKICAgICAgcmV0dXJuIHVuaXF1ZXM7CiAgICB9LAogIH0sCiAgY3JlYXRlZCgpIHsKICAgIGlmICh0aGlzLmZvcm1EYXRhLnRpdGxlIHx8IHRoaXMuZm9ybURhdGEuY29udGVudCkgewogICAgICB0aGlzLkxvYWREYXRhKHRoaXMuZm9ybURhdGEpCiAgICB9CiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHsKICAgICAgICBpZiAodGhpcy4kcmVmcy5FbnRpdHlJZGVudGlmaWNhdGlvbklkKSB7CiAgICAgICAgICB0aGlzLiRlY2hhcnRzLmluaXQodGhpcy4kcmVmcy5FbnRpdHlJZGVudGlmaWNhdGlvbklkKS5yZXNpemUoKQogICAgICAgIH0KICAgICAgfSkKICAgIH0pCiAgfSwKICB1cGRhdGVkKCkgewogIH0KfQo="},null]}