{"remainingRequest":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/howie/Documents/nlp_web/src/views/Layout/ObjectLevelEmotion.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/howie/Documents/nlp_web/src/views/Layout/ObjectLevelEmotion.vue","mtime":1585021550696},{"path":"/Users/howie/Documents/nlp_web/node_modules/css-loader/dist/cjs.js","mtime":1582429582288},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1582429582421},{"path":"/Users/howie/Documents/nlp_web/node_modules/postcss-loader/src/index.js","mtime":1564153364000},{"path":"/Users/howie/Documents/nlp_web/node_modules/sass-loader/dist/cjs.js","mtime":1571922493338},{"path":"/Users/howie/Documents/nlp_web/node_modules/cache-loader/dist/cjs.js","mtime":1571922489860},{"path":"/Users/howie/Documents/nlp_web/node_modules/vue-loader/lib/index.js","mtime":1582429582421}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRlbW8tc3Bpbi1pY29uLWxvYWR7CiAgICBhbmltYXRpb246IGFuaS1kZW1vLXNwaW4gMXMgbGluZWFyIGluZmluaXRlOwp9CkBrZXlmcmFtZXMgYW5pLWRlbW8tc3BpbiB7CiAgICBmcm9tIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7fQogICAgNTAlICB7IHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7fQogICAgdG8gICB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7fQp9Ci5kZW1vLXNwaW4tY29sewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgYm9yZGVyOiAxcHggc29saWQgI2VlZTsKfQoub2JqZWN0TGV2ZWwgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y2ZjZmNjsKICAgIG1pbi1oZWlnaHQ6IDYwMHB4OwogICAgcGFkZGluZzogMjBweDsKCiAgICAuS2V5d29yZEVsc2UgewogICAgICAgIG1pbi1oZWlnaHQ6IDYwMHB4OwogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgIH0KCiAgICAuQ2FyZCB7CiAgICAgICAgLktleXdvcmRFY2hhcnRzIHsKICAgICAgICAgICAgbWluLWhlaWdodDogNjAwcHg7CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["ObjectLevelEmotion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ObjectLevelEmotion.vue","sourceRoot":"src/views/Children","sourcesContent":["<template>\n    <div class=\"PartsAnalysis objectLevel\">\n        <Card dis-hover class=\"Card\">\n            <p slot=\"title\">对象层面情感</p>\n            <div style=\"position: relative\" v-if=\"!isShow\">\n                <div ref=\"KeywordId\" class=\"KeywordEcharts\">\n\n                </div>\n                <div style=\"position: absolute;right: 80px;top: 6px;display: flex;align-items: center;\">\n                    <div style=\"display: flex;align-items: center;\" v-for=\"(item, i) in list\" :key=\"i\">\n                        <div style=\"width: 30px;height: 15px;border-radius: 3px\" :style=\"{backgroundColor: item.color}\"></div>\n                        <div style=\"padding: 0 5px\">{{item.name}}</div>\n                    </div>\n                </div>\n            </div>\n            <div v-else style=\"min-height: 600px;display: flex;align-items: center;justify-content: center\">\n                没有对象层面情感\n            </div>\n            <Spin fix v-show=\"isList\">\n                <Icon type=\"ios-loading\" size=18 class=\"demo-spin-icon-load\"></Icon>\n                <div>载入中...</div>\n            </Spin>\n        </Card>\n    </div>\n</template>\n\n<script>\n  import api from \"../../api/api\";\n\n  export default {\n    name: \"ObjectLevelEmotion\",\n    props: ['formData'],\n    data() {\n      return {\n        data: [],\n        links: [],\n        isList: true,\n        isShow: false,\n        categories: [],\n        list: [{name: '正', color: '#017E03'}, {name: '中', color: '#FF8529'}, {name: '负', color: '#D3333F'}]\n      };\n    },\n    computed: {},\n    methods: {\n      initEchart() {\n        let KeywordId = this.$refs.KeywordId;\n        if (!KeywordId) {\n          return false\n        }\n        const myChart = this.$echarts.init(KeywordId);\n        let option = {\n          color: [\n            \"#19c7b9\",\n            \"#1919c7\",\n            \"#9f19c7\",\n          ],\n          title: {\n            text: '',\n            subtext: '',\n            x: 'right',\n            y: 'bottom'\n          },\n          tooltip: {\n            show: false,\n          },\n          toolbox: {\n            show: true,\n            feature: {\n              restore: {show: true},\n              magicType: {show: true,},\n              saveAsImage: {show: true}\n            }\n          },\n          legend: {\n            x: 'left',\n            data: ['文本', '对象', '层面',]\n          },\n          series: [{\n            type: 'graph',\n            layout: 'force',\n            legendHoverLink: true,\n            focusNodeAdjacency: true,\n            force: {\n              repulsion: 500\n            },\n            categories: [\n              {\n                name: '文本'\n              },\n              {\n                name: '对象'\n              },\n              {\n                name: '层面'\n              },\n            ],\n            label : {\n              show : true,\n            },\n            lineStyle: {\n              color: 'source',\n              curveness: 0.3\n            },\n            emphasis: {\n              lineStyle: {\n                width: 5\n              }\n            },\n            roam : true,\n            data : this.data,\n            links : this.links,\n          }]\n        };\n        myChart.setOption(option, true);\n      },\n      async LoadData(record) {\n        try {\n          this.isList = true\n          this.data = []\n          const data = []\n          this.links = []\n          let formData = new FormData();\n          formData.append('title', record.title);\n          formData.append('content', record.content);\n          formData.append('industry', 22);\n          let result = await api.ObjectLevelEmotionList(formData)\n\n          if (result.code === 200) {\n            if (result.data.length === 0) {\n              this.isShow = true\n            } else {\n              this.isShow = false\n            }\n            console.log(result)\n            if (result.data.length > 0) {\n              result.data.map((v, i) => {\n                data.push({\n                  id: v.target.id,\n                  name: v.target.name,\n                  value: v.target.sentiment,\n                  category: 1,\n                })\n                if (v.beddings.length > 0) {\n                  v.beddings.map((item, j) => {\n                    data.push({\n                      id: item.id,\n                      name: item.name,\n                      value: item.sentiment,\n                      category: 2,\n                    })\n                  })\n                }\n              })\n\n              let item = [{id: '-1', name: '文本', showName: '文本', value: 10, category: 0}]\n              this.data = [...item, ...data]\n              result.data.map((v, i) => {\n                this.links.push({\n                  source: v.target.id,\n                  target: '-1'\n                })\n                if (v.beddings.length > 0) {\n                  v.beddings.map((item, j) => {\n                    this.links.push({\n                      source: item.id,\n                      target: v.target.id,\n                    })\n                  })\n                }\n              })\n              this.isList = false\n              this.data.forEach((node) => {\n                if (node.category === 0) {\n                  node.symbolSize = 70;\n                  node.itemStyle = {\n                    normal: {\n                      borderColor: '#19c7b9',\n                      borderWidth: 5,\n                      color: '#19c7b9',\n                    },\n\n                  }\n                } else if (node.category === 1) {\n                  node.symbolSize = 60;\n                  node.itemStyle = {\n                    normal: {\n                      borderColor: '#1919c7',\n                      borderWidth: 5,\n                      color: node.value > 0 ? \"#017E03\" : node.value == 0 ? \"#FF8529\" : node.value < 0 ? \"#D3333F\" : '',\n                    },\n\n                  }\n                } else {\n                  // 大于0 正面，等于0 中性，小于0 负面\n                  node.symbolSize = 70  / 1.5;\n                  node.label = {\n                    normal: {\n                      show: node.symbolSize > 30\n                    }\n                  };\n                  node.itemStyle = {\n                    normal: {\n                      borderColor: '#9f19c7',\n                      borderWidth: 5,\n                      color: node.value > 0 ? \"#017E03\" : node.value == 0 ? \"#FF8529\" : node.value < 0 ? \"#D3333F\" : '',\n                    },\n\n                  }\n                }\n\n                node.category = node.category;\n              });\n            }\n            this.$nextTick(() => {\n              this.initEchart()\n            })\n          }\n          this.isList = false\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    },\n    created() {\n      if (this.formData.title && this.formData.content) {\n        this.LoadData(this.formData)\n      }\n    },\n\n    mounted() {\n    },\n    updated() {\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n    .demo-spin-icon-load{\n        animation: ani-demo-spin 1s linear infinite;\n    }\n    @keyframes ani-demo-spin {\n        from { transform: rotate(0deg);}\n        50%  { transform: rotate(180deg);}\n        to   { transform: rotate(360deg);}\n    }\n    .demo-spin-col{\n        position: relative;\n        border: 1px solid #eee;\n    }\n    .objectLevel {\n        background-color: #f6f6f6;\n        min-height: 600px;\n        padding: 20px;\n\n        .KeywordElse {\n            min-height: 600px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .Card {\n            .KeywordEcharts {\n                min-height: 600px;\n            }\n        }\n    }\n</style>\n\n"]}]}